/* eslint-disable */

/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.jetsonrpc.ActionDescription', null, global);
goog.exportSymbol('proto.jetsonrpc.DDCommand', null, global);
goog.exportSymbol('proto.jetsonrpc.DriveState', null, global);
goog.exportSymbol('proto.jetsonrpc.DriveStateEnum', null, global);
goog.exportSymbol('proto.jetsonrpc.HeroFeedback', null, global);
goog.exportSymbol('proto.jetsonrpc.Rate', null, global);
goog.exportSymbol('proto.jetsonrpc.Void', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.jetsonrpc.Void = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.jetsonrpc.Void, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.jetsonrpc.Void.displayName = 'proto.jetsonrpc.Void';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.jetsonrpc.Void.prototype.toObject = function(opt_includeInstance) {
  return proto.jetsonrpc.Void.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.jetsonrpc.Void} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.jetsonrpc.Void.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.jetsonrpc.Void}
 */
proto.jetsonrpc.Void.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.jetsonrpc.Void;
  return proto.jetsonrpc.Void.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.jetsonrpc.Void} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.jetsonrpc.Void}
 */
proto.jetsonrpc.Void.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.jetsonrpc.Void.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.jetsonrpc.Void.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.jetsonrpc.Void} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.jetsonrpc.Void.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.jetsonrpc.DDCommand = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.jetsonrpc.DDCommand, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.jetsonrpc.DDCommand.displayName = 'proto.jetsonrpc.DDCommand';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.jetsonrpc.DDCommand.prototype.toObject = function(opt_includeInstance) {
  return proto.jetsonrpc.DDCommand.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.jetsonrpc.DDCommand} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.jetsonrpc.DDCommand.toObject = function(includeInstance, msg) {
  var f, obj = {
    values: msg.getValues_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.jetsonrpc.DDCommand}
 */
proto.jetsonrpc.DDCommand.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.jetsonrpc.DDCommand;
  return proto.jetsonrpc.DDCommand.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.jetsonrpc.DDCommand} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.jetsonrpc.DDCommand}
 */
proto.jetsonrpc.DDCommand.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setValues(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.jetsonrpc.DDCommand.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.jetsonrpc.DDCommand.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.jetsonrpc.DDCommand} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.jetsonrpc.DDCommand.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getValues_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
};


/**
 * optional bytes values = 1;
 * @return {!(string|Uint8Array)}
 */
proto.jetsonrpc.DDCommand.prototype.getValues = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes values = 1;
 * This is a type-conversion wrapper around `getValues()`
 * @return {string}
 */
proto.jetsonrpc.DDCommand.prototype.getValues_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getValues()));
};


/**
 * optional bytes values = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getValues()`
 * @return {!Uint8Array}
 */
proto.jetsonrpc.DDCommand.prototype.getValues_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getValues()));
};


/** @param {!(string|Uint8Array)} value */
proto.jetsonrpc.DDCommand.prototype.setValues = function(value) {
  jspb.Message.setProto3BytesField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.jetsonrpc.HeroFeedback = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.jetsonrpc.HeroFeedback, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.jetsonrpc.HeroFeedback.displayName = 'proto.jetsonrpc.HeroFeedback';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.jetsonrpc.HeroFeedback.prototype.toObject = function(opt_includeInstance) {
  return proto.jetsonrpc.HeroFeedback.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.jetsonrpc.HeroFeedback} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.jetsonrpc.HeroFeedback.toObject = function(includeInstance, msg) {
  var f, obj = {
    currents: msg.getCurrents_asB64(),
    bucketladderanglel: +jspb.Message.getFieldWithDefault(msg, 2, 0.0),
    bucketladderangler: +jspb.Message.getFieldWithDefault(msg, 3, 0.0),
    depositbinraised: jspb.Message.getFieldWithDefault(msg, 4, false),
    depositbinlowered: jspb.Message.getFieldWithDefault(msg, 5, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.jetsonrpc.HeroFeedback}
 */
proto.jetsonrpc.HeroFeedback.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.jetsonrpc.HeroFeedback;
  return proto.jetsonrpc.HeroFeedback.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.jetsonrpc.HeroFeedback} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.jetsonrpc.HeroFeedback}
 */
proto.jetsonrpc.HeroFeedback.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setCurrents(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setBucketladderanglel(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setBucketladderangler(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setDepositbinraised(value);
      break;
    case 5:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setDepositbinlowered(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.jetsonrpc.HeroFeedback.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.jetsonrpc.HeroFeedback.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.jetsonrpc.HeroFeedback} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.jetsonrpc.HeroFeedback.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCurrents_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getBucketladderanglel();
  if (f !== 0.0) {
    writer.writeFloat(
      2,
      f
    );
  }
  f = message.getBucketladderangler();
  if (f !== 0.0) {
    writer.writeFloat(
      3,
      f
    );
  }
  f = message.getDepositbinraised();
  if (f) {
    writer.writeBool(
      4,
      f
    );
  }
  f = message.getDepositbinlowered();
  if (f) {
    writer.writeBool(
      5,
      f
    );
  }
};


/**
 * optional bytes currents = 1;
 * @return {!(string|Uint8Array)}
 */
proto.jetsonrpc.HeroFeedback.prototype.getCurrents = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes currents = 1;
 * This is a type-conversion wrapper around `getCurrents()`
 * @return {string}
 */
proto.jetsonrpc.HeroFeedback.prototype.getCurrents_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getCurrents()));
};


/**
 * optional bytes currents = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getCurrents()`
 * @return {!Uint8Array}
 */
proto.jetsonrpc.HeroFeedback.prototype.getCurrents_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getCurrents()));
};


/** @param {!(string|Uint8Array)} value */
proto.jetsonrpc.HeroFeedback.prototype.setCurrents = function(value) {
  jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional float bucketLadderAngleL = 2;
 * @return {number}
 */
proto.jetsonrpc.HeroFeedback.prototype.getBucketladderanglel = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 2, 0.0));
};


/** @param {number} value */
proto.jetsonrpc.HeroFeedback.prototype.setBucketladderanglel = function(value) {
  jspb.Message.setProto3FloatField(this, 2, value);
};


/**
 * optional float bucketLadderAngleR = 3;
 * @return {number}
 */
proto.jetsonrpc.HeroFeedback.prototype.getBucketladderangler = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 3, 0.0));
};


/** @param {number} value */
proto.jetsonrpc.HeroFeedback.prototype.setBucketladderangler = function(value) {
  jspb.Message.setProto3FloatField(this, 3, value);
};


/**
 * optional bool depositBinRaised = 4;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.jetsonrpc.HeroFeedback.prototype.getDepositbinraised = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 4, false));
};


/** @param {boolean} value */
proto.jetsonrpc.HeroFeedback.prototype.setDepositbinraised = function(value) {
  jspb.Message.setProto3BooleanField(this, 4, value);
};


/**
 * optional bool depositBinLowered = 5;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.jetsonrpc.HeroFeedback.prototype.getDepositbinlowered = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 5, false));
};


/** @param {boolean} value */
proto.jetsonrpc.HeroFeedback.prototype.setDepositbinlowered = function(value) {
  jspb.Message.setProto3BooleanField(this, 5, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.jetsonrpc.Rate = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.jetsonrpc.Rate, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.jetsonrpc.Rate.displayName = 'proto.jetsonrpc.Rate';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.jetsonrpc.Rate.prototype.toObject = function(opt_includeInstance) {
  return proto.jetsonrpc.Rate.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.jetsonrpc.Rate} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.jetsonrpc.Rate.toObject = function(includeInstance, msg) {
  var f, obj = {
    rate: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.jetsonrpc.Rate}
 */
proto.jetsonrpc.Rate.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.jetsonrpc.Rate;
  return proto.jetsonrpc.Rate.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.jetsonrpc.Rate} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.jetsonrpc.Rate}
 */
proto.jetsonrpc.Rate.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setRate(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.jetsonrpc.Rate.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.jetsonrpc.Rate.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.jetsonrpc.Rate} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.jetsonrpc.Rate.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRate();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
};


/**
 * optional uint32 rate = 1;
 * @return {number}
 */
proto.jetsonrpc.Rate.prototype.getRate = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.jetsonrpc.Rate.prototype.setRate = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.jetsonrpc.DriveState = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.jetsonrpc.DriveState, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.jetsonrpc.DriveState.displayName = 'proto.jetsonrpc.DriveState';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.jetsonrpc.DriveState.prototype.toObject = function(opt_includeInstance) {
  return proto.jetsonrpc.DriveState.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.jetsonrpc.DriveState} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.jetsonrpc.DriveState.toObject = function(includeInstance, msg) {
  var f, obj = {
    dse: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.jetsonrpc.DriveState}
 */
proto.jetsonrpc.DriveState.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.jetsonrpc.DriveState;
  return proto.jetsonrpc.DriveState.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.jetsonrpc.DriveState} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.jetsonrpc.DriveState}
 */
proto.jetsonrpc.DriveState.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.jetsonrpc.DriveStateEnum} */ (reader.readEnum());
      msg.setDse(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.jetsonrpc.DriveState.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.jetsonrpc.DriveState.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.jetsonrpc.DriveState} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.jetsonrpc.DriveState.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDse();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
};


/**
 * optional DriveStateEnum dse = 1;
 * @return {!proto.jetsonrpc.DriveStateEnum}
 */
proto.jetsonrpc.DriveState.prototype.getDse = function() {
  return /** @type {!proto.jetsonrpc.DriveStateEnum} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.jetsonrpc.DriveStateEnum} value */
proto.jetsonrpc.DriveState.prototype.setDse = function(value) {
  jspb.Message.setProto3EnumField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.jetsonrpc.ActionDescription = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.jetsonrpc.ActionDescription, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.jetsonrpc.ActionDescription.displayName = 'proto.jetsonrpc.ActionDescription';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.jetsonrpc.ActionDescription.prototype.toObject = function(opt_includeInstance) {
  return proto.jetsonrpc.ActionDescription.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.jetsonrpc.ActionDescription} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.jetsonrpc.ActionDescription.toObject = function(includeInstance, msg) {
  var f, obj = {
    text: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.jetsonrpc.ActionDescription}
 */
proto.jetsonrpc.ActionDescription.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.jetsonrpc.ActionDescription;
  return proto.jetsonrpc.ActionDescription.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.jetsonrpc.ActionDescription} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.jetsonrpc.ActionDescription}
 */
proto.jetsonrpc.ActionDescription.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setText(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.jetsonrpc.ActionDescription.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.jetsonrpc.ActionDescription.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.jetsonrpc.ActionDescription} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.jetsonrpc.ActionDescription.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getText();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string text = 1;
 * @return {string}
 */
proto.jetsonrpc.ActionDescription.prototype.getText = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.jetsonrpc.ActionDescription.prototype.setText = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * @enum {number}
 */
proto.jetsonrpc.DriveStateEnum = {
  DIRECT_DRIVE: 0,
  AUTONOMY: 1,
  IDLE: 2
};

goog.object.extend(exports, proto.jetsonrpc);
